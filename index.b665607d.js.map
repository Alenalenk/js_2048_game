{"mappings":"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","sources":["<anon>","src/scripts/main.js","src/modules/Game.class.js"],"sourcesContent":["\"use strict\";\nvar $a5fd07fa01589658$exports = {};\n\"use strict\";\n/**\n * This class represents the game.\n * Now it has a basic structure, that is needed for testing.\n * Feel free to add more props and methods if needed.\n */ class $a5fd07fa01589658$var$Game {\n    /**\n   * Creates a new game instance.\n   *\n   * @param {number[][]} initialState\n   * The initial state of the board.\n   * @default\n   * [[0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0]]\n   *\n   * If passed, the board will be initialized with the provided\n   * initial state.\n   */ constructor(initialState){\n        // eslint-disable-next-line no-console\n        this.initialState = initialState || [\n            [\n                0,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                0\n            ]\n        ];\n        this.gameState = this.initialState.map((row)=>[\n                ...row\n            ]);\n        this.gameStatus = \"idle\";\n        this.gameScore = 0;\n        this.zeroCell = 16;\n        this.number = [\n            2,\n            2,\n            2,\n            2,\n            2,\n            2,\n            2,\n            2,\n            2,\n            4\n        ];\n    }\n    random(max) {\n        return Math.floor(Math.random() * (max + 1));\n    }\n    addNewCell() {\n        const emptyCells = [];\n        for(let i = 0; i < this.gameState.length; i++){\n            for(let j = 0; j < this.gameState[i].length; j++)if (this.gameState[i][j] === 0) emptyCells.push([\n                i,\n                j\n            ]);\n        }\n        if (emptyCells.length > 0) {\n            const [row, cell] = emptyCells[this.random(emptyCells.length - 1)];\n            this.gameState[row][cell] = this.number[this.random(9)];\n            this.zeroCell--;\n        }\n    }\n    checkinitialState() {\n        let count = 0;\n        for(let i = 0; i < this.gameState.length; i++)for(let j = 0; j < this.gameState[i].length; j++){\n            if (this.gameState[i][j] === 0) count++;\n            else if (this.gameState[i][j] === 2048) this.gameStatus = \"win\";\n        }\n        this.zeroCell = count;\n        if (count === 0 && !this.canMove()) this.gameStatus = \"lose\";\n    }\n    canMove() {\n        for(let i = 0; i < this.gameState.length; i++)for(let j = 0; j < this.gameState[i].length; j++){\n            if (this.gameState[i][j] === 0) return true;\n            if (j < this.gameState[i].length - 1 && this.gameState[i][j] === this.gameState[i][j + 1]) return true;\n            if (i < this.gameState.length - 1 && this.gameState[i][j] === this.gameState[i + 1][j]) return true;\n        }\n        return false;\n    }\n    moveLeft() {\n        if (this.gameStatus !== \"playing\") return;\n        const arr = [];\n        let score = 0;\n        for(let i = 0; i < this.gameState.length; i++){\n            let row = this.gameState[i].filter((num)=>num !== 0);\n            for(let j = 0; j < row.length - 1; j++)if (row[j] === row[j + 1]) {\n                row[j] *= 2;\n                row[j + 1] = 0;\n                score += row[j];\n            }\n            row = row.filter((num)=>num !== 0);\n            while(row.length < 4)row.push(0);\n            arr.push(row);\n        }\n        if (JSON.stringify(arr) !== JSON.stringify(this.gameState)) {\n            this.gameState = arr;\n            this.addNewCell();\n            this.gameScore += score;\n            this.checkinitialState();\n        }\n    }\n    moveRight() {\n        if (this.gameStatus !== \"playing\") return;\n        const arr = [];\n        let score = 0;\n        for(let i = 0; i < this.gameState.length; i++){\n            let row = this.gameState[i].filter((num)=>num !== 0);\n            for(let j = row.length - 1; j > 0; j--)if (row[j] === row[j - 1]) {\n                row[j] *= 2;\n                row[j - 1] = 0;\n                score += row[j];\n            }\n            row = row.filter((num)=>num !== 0);\n            while(row.length < 4)row.unshift(0);\n            arr.push(row);\n        }\n        if (JSON.stringify(arr) !== JSON.stringify(this.gameState)) {\n            this.gameState = arr;\n            this.addNewCell();\n            this.gameScore += score;\n            this.checkinitialState();\n        }\n    }\n    moveUp() {\n        if (this.gameStatus !== \"playing\") return;\n        const arr = [\n            [],\n            [],\n            [],\n            []\n        ];\n        let score = 0;\n        for(let i = 0; i < this.gameState.length; i++){\n            let column = [\n                this.gameState[0][i],\n                this.gameState[1][i],\n                this.gameState[2][i],\n                this.gameState[3][i]\n            ];\n            column = column.filter((num)=>num !== 0);\n            for(let j = 0; j < column.length - 1; j++)if (column[j] === column[j + 1]) {\n                column[j] *= 2;\n                column[j + 1] = 0;\n                score += column[j];\n            }\n            column = column.filter((num)=>num !== 0);\n            while(column.length < 4)column.push(0);\n            for(let j = 0; j < this.gameState.length; j++)arr[j][i] = column[j];\n        }\n        if (JSON.stringify(arr) !== JSON.stringify(this.gameState)) {\n            this.gameState = arr;\n            this.addNewCell();\n            this.gameScore += score;\n            this.checkinitialState();\n        }\n    }\n    moveDown() {\n        if (this.gameStatus !== \"playing\") return;\n        const arr = [\n            [],\n            [],\n            [],\n            []\n        ];\n        let score = 0;\n        for(let i = 0; i < this.gameState.length; i++){\n            let column = [\n                this.gameState[0][i],\n                this.gameState[1][i],\n                this.gameState[2][i],\n                this.gameState[3][i]\n            ];\n            column = column.filter((num)=>num !== 0);\n            for(let j = column.length - 1; j > 0; j--)if (column[j] === column[j - 1]) {\n                column[j] *= 2;\n                column[j - 1] = 0;\n                score += column[j];\n            }\n            column = column.filter((num)=>num !== 0);\n            while(column.length < 4)column.unshift(0);\n            for(let j = 0; j < this.gameState.length; j++)arr[j][i] = column[j];\n        }\n        if (JSON.stringify(arr) !== JSON.stringify(this.gameState)) {\n            this.gameState = arr;\n            this.addNewCell();\n            this.gameScore += score;\n            this.checkinitialState();\n        }\n    }\n    /**\n   * @returns {number}\n   */ getScore() {\n        return this.gameScore;\n    }\n    /**\n   * @returns {number[][]}\n   */ getState() {\n        return this.gameState;\n    }\n    /**\n   * Returns the current game status.\n   *\n   * @returns {string} One of: 'idle', 'playing', 'win', 'lose'\n   *\n   * `idle` - the game has not started yet (the initial state);\n   * `playing` - the game is in progress;\n   * `win` - the game is won;\n   * `lose` - the game is lost\n   */ getStatus() {\n        return this.gameStatus;\n    }\n    /**\n   * Starts the game.\n   */ start() {\n        this.addNewCell();\n        this.addNewCell();\n        this.gameStatus = \"playing\";\n    }\n    /**\n   * Resets the game.\n   */ restart() {\n        this.gameState = this.initialState.map((row)=>[\n                ...row\n            ]);\n        this.gameStatus = \"idle\";\n        this.gameScore = 0;\n        this.zeroCell = 16;\n    }\n}\n$a5fd07fa01589658$exports = $a5fd07fa01589658$var$Game;\n\n\nconst $09e991522ca7e64e$var$fieldRow = [\n    ...document.querySelectorAll(\".field-row\")\n];\nconst $09e991522ca7e64e$var$scoreCeil = document.querySelector(\".game-score\");\nconst $09e991522ca7e64e$var$startBtn = document.querySelector(\".start\");\nconst $09e991522ca7e64e$var$messageWin = document.querySelector(\".message-win\");\nconst $09e991522ca7e64e$var$messageLose = document.querySelector(\".message-lose\");\nconst $09e991522ca7e64e$var$messageStart = document.querySelector(\".message-start\");\nconst $09e991522ca7e64e$var$game = new $a5fd07fa01589658$exports();\nconst $09e991522ca7e64e$var$addField = ()=>{\n    if ($09e991522ca7e64e$var$game.getStatus() === \"win\") {\n        $09e991522ca7e64e$var$messageWin.classList.remove(\"hidden\");\n        document.removeEventListener(\"keydown\", $09e991522ca7e64e$var$handleKeyDown);\n        $09e991522ca7e64e$var$game.gameStatus = \"playing\";\n        return;\n    }\n    if ($09e991522ca7e64e$var$game.getStatus() === \"lose\") {\n        $09e991522ca7e64e$var$messageLose.classList.remove(\"hidden\");\n        document.removeEventListener(\"keydown\", $09e991522ca7e64e$var$handleKeyDown);\n        $09e991522ca7e64e$var$game.gameStatus = \"playing\";\n        return;\n    }\n    for(let i = 0; i < $09e991522ca7e64e$var$game.gameState.length; i++){\n        const fieldCell = [\n            ...$09e991522ca7e64e$var$fieldRow[i].querySelectorAll(\".field-cell\")\n        ];\n        for(let j = 0; j < $09e991522ca7e64e$var$game.gameState[i].length; j++){\n            const cell = fieldCell[j];\n            const cellValue = $09e991522ca7e64e$var$game.gameState[i][j];\n            if (cellValue === 0 && cell.textContent > 0) {\n                cell.classList.remove(`field-cell--${cell.textContent}`);\n                cell.textContent = \"\";\n            }\n            if (cellValue > 0) {\n                cell.classList.remove(`field-cell--${cell.textContent}`);\n                cell.classList.add(`field-cell--${cellValue}`);\n                cell.textContent = cellValue;\n            }\n        }\n    }\n    $09e991522ca7e64e$var$scoreCeil.textContent = $09e991522ca7e64e$var$game.gameScore;\n};\nconst $09e991522ca7e64e$var$handleKeyDown = (e)=>{\n    switch(e.key){\n        case \"ArrowLeft\":\n            $09e991522ca7e64e$var$game.moveLeft();\n            break;\n        case \"ArrowRight\":\n            $09e991522ca7e64e$var$game.moveRight();\n            break;\n        case \"ArrowUp\":\n            $09e991522ca7e64e$var$game.moveUp();\n            break;\n        case \"ArrowDown\":\n            $09e991522ca7e64e$var$game.moveDown();\n            break;\n        default:\n            return;\n    }\n    $09e991522ca7e64e$var$addField();\n};\nconst $09e991522ca7e64e$var$handleStart = ()=>{\n    document.addEventListener(\"keydown\", $09e991522ca7e64e$var$handleKeyDown);\n    if ($09e991522ca7e64e$var$game.getStatus() === \"playing\") {\n        $09e991522ca7e64e$var$game.restart();\n        $09e991522ca7e64e$var$messageLose.classList.add(\"hidden\");\n        $09e991522ca7e64e$var$messageWin.classList.add(\"hidden\");\n    }\n    if ($09e991522ca7e64e$var$game.getStatus() === \"idle\") {\n        $09e991522ca7e64e$var$game.start();\n        $09e991522ca7e64e$var$startBtn.classList.remove(\"start\");\n        $09e991522ca7e64e$var$startBtn.classList.add(\"restart\");\n        $09e991522ca7e64e$var$startBtn.textContent = \"Restart\";\n        $09e991522ca7e64e$var$messageStart.classList.add(\"hidden\");\n    }\n    $09e991522ca7e64e$var$addField();\n};\n$09e991522ca7e64e$var$startBtn.addEventListener(\"click\", $09e991522ca7e64e$var$handleStart);\n\n\n//# sourceMappingURL=index.b665607d.js.map\n","'use strict';\n\nconst Game = require('../modules/Game.class');\nconst fieldRow = [...document.querySelectorAll('.field-row')];\nconst scoreCeil = document.querySelector('.game-score');\nconst startBtn = document.querySelector('.start');\nconst messageWin = document.querySelector('.message-win');\nconst messageLose = document.querySelector('.message-lose');\nconst messageStart = document.querySelector('.message-start');\n\nconst game = new Game();\n\nconst addField = () => {\n  if (game.getStatus() === 'win') {\n    messageWin.classList.remove('hidden');\n    document.removeEventListener('keydown', handleKeyDown);\n    game.gameStatus = 'playing';\n\n    return;\n  }\n\n  if (game.getStatus() === 'lose') {\n    messageLose.classList.remove('hidden');\n    document.removeEventListener('keydown', handleKeyDown);\n    game.gameStatus = 'playing';\n\n    return;\n  }\n\n  for (let i = 0; i < game.gameState.length; i++) {\n    const fieldCell = [...fieldRow[i].querySelectorAll('.field-cell')];\n\n    for (let j = 0; j < game.gameState[i].length; j++) {\n      const cell = fieldCell[j];\n      const cellValue = game.gameState[i][j];\n\n      if (cellValue === 0 && cell.textContent > 0) {\n        cell.classList.remove(`field-cell--${cell.textContent}`);\n        cell.textContent = '';\n      }\n\n      if (cellValue > 0) {\n        cell.classList.remove(`field-cell--${cell.textContent}`);\n        cell.classList.add(`field-cell--${cellValue}`);\n        cell.textContent = cellValue;\n      }\n    }\n  }\n  scoreCeil.textContent = game.gameScore;\n};\n\nconst handleKeyDown = (e) => {\n  switch (e.key) {\n    case 'ArrowLeft':\n      game.moveLeft();\n      break;\n\n    case 'ArrowRight':\n      game.moveRight();\n      break;\n\n    case 'ArrowUp':\n      game.moveUp();\n      break;\n\n    case 'ArrowDown':\n      game.moveDown();\n      break;\n\n    default:\n      return;\n  }\n\n  addField();\n};\n\nconst handleStart = () => {\n  document.addEventListener('keydown', handleKeyDown);\n\n  if (game.getStatus() === 'playing') {\n    game.restart();\n    messageLose.classList.add('hidden');\n    messageWin.classList.add('hidden');\n  }\n\n  if (game.getStatus() === 'idle') {\n    game.start();\n    startBtn.classList.remove('start');\n    startBtn.classList.add('restart');\n    startBtn.textContent = 'Restart';\n    messageStart.classList.add('hidden');\n  }\n\n  addField();\n};\n\nstartBtn.addEventListener('click', handleStart);\n","'use strict';\n\n/**\n * This class represents the game.\n * Now it has a basic structure, that is needed for testing.\n * Feel free to add more props and methods if needed.\n */\nclass Game {\n  /**\n   * Creates a new game instance.\n   *\n   * @param {number[][]} initialState\n   * The initial state of the board.\n   * @default\n   * [[0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0]]\n   *\n   * If passed, the board will be initialized with the provided\n   * initial state.\n   */\n  constructor(initialState) {\n    // eslint-disable-next-line no-console\n    this.initialState = initialState || [\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n    ];\n    this.gameState = this.initialState.map((row) => [...row]);\n    this.gameStatus = 'idle';\n    this.gameScore = 0;\n    this.zeroCell = 16;\n    this.number = [2, 2, 2, 2, 2, 2, 2, 2, 2, 4];\n  }\n\n  random(max) {\n    return Math.floor(Math.random() * (max + 1));\n  }\n\n  addNewCell() {\n    const emptyCells = [];\n\n    for (let i = 0; i < this.gameState.length; i++) {\n      for (let j = 0; j < this.gameState[i].length; j++) {\n        if (this.gameState[i][j] === 0) {\n          emptyCells.push([i, j]);\n        }\n      }\n    }\n\n    if (emptyCells.length > 0) {\n      const [row, cell] = emptyCells[this.random(emptyCells.length - 1)];\n\n      this.gameState[row][cell] = this.number[this.random(9)];\n      this.zeroCell--;\n    }\n  }\n\n  checkinitialState() {\n    let count = 0;\n\n    for (let i = 0; i < this.gameState.length; i++) {\n      for (let j = 0; j < this.gameState[i].length; j++) {\n        if (this.gameState[i][j] === 0) {\n          count++;\n        } else {\n          if (this.gameState[i][j] === 2048) {\n            this.gameStatus = 'win';\n          }\n        }\n      }\n    }\n    this.zeroCell = count;\n\n    if (count === 0 && !this.canMove()) {\n      this.gameStatus = 'lose';\n    }\n  }\n\n  canMove() {\n    for (let i = 0; i < this.gameState.length; i++) {\n      for (let j = 0; j < this.gameState[i].length; j++) {\n        if (this.gameState[i][j] === 0) {\n          return true;\n        }\n\n        if (\n          j < this.gameState[i].length - 1 &&\n          this.gameState[i][j] === this.gameState[i][j + 1]\n        ) {\n          return true;\n        }\n\n        if (\n          i < this.gameState.length - 1 &&\n          this.gameState[i][j] === this.gameState[i + 1][j]\n        ) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  }\n\n  moveLeft() {\n    if (this.gameStatus !== 'playing') {\n      return;\n    }\n\n    const arr = [];\n    let score = 0;\n\n    for (let i = 0; i < this.gameState.length; i++) {\n      let row = this.gameState[i].filter((num) => num !== 0);\n\n      for (let j = 0; j < row.length - 1; j++) {\n        if (row[j] === row[j + 1]) {\n          row[j] *= 2;\n          row[j + 1] = 0;\n          score += row[j];\n        }\n      }\n\n      row = row.filter((num) => num !== 0);\n\n      while (row.length < 4) {\n        row.push(0);\n      }\n      arr.push(row);\n    }\n\n    if (JSON.stringify(arr) !== JSON.stringify(this.gameState)) {\n      this.gameState = arr;\n      this.addNewCell();\n      this.gameScore += score;\n      this.checkinitialState();\n    }\n  }\n\n  moveRight() {\n    if (this.gameStatus !== 'playing') {\n      return;\n    }\n\n    const arr = [];\n    let score = 0;\n\n    for (let i = 0; i < this.gameState.length; i++) {\n      let row = this.gameState[i].filter((num) => num !== 0);\n\n      for (let j = row.length - 1; j > 0; j--) {\n        if (row[j] === row[j - 1]) {\n          row[j] *= 2;\n          row[j - 1] = 0;\n          score += row[j];\n        }\n      }\n\n      row = row.filter((num) => num !== 0);\n\n      while (row.length < 4) {\n        row.unshift(0);\n      }\n      arr.push(row);\n    }\n\n    if (JSON.stringify(arr) !== JSON.stringify(this.gameState)) {\n      this.gameState = arr;\n      this.addNewCell();\n      this.gameScore += score;\n      this.checkinitialState();\n    }\n  }\n\n  moveUp() {\n    if (this.gameStatus !== 'playing') {\n      return;\n    }\n\n    const arr = [[], [], [], []];\n    let score = 0;\n\n    for (let i = 0; i < this.gameState.length; i++) {\n      let column = [\n        this.gameState[0][i],\n        this.gameState[1][i],\n        this.gameState[2][i],\n        this.gameState[3][i],\n      ];\n\n      column = column.filter((num) => num !== 0);\n\n      for (let j = 0; j < column.length - 1; j++) {\n        if (column[j] === column[j + 1]) {\n          column[j] *= 2;\n          column[j + 1] = 0;\n          score += column[j];\n        }\n      }\n\n      column = column.filter((num) => num !== 0);\n\n      while (column.length < 4) {\n        column.push(0);\n      }\n\n      for (let j = 0; j < this.gameState.length; j++) {\n        arr[j][i] = column[j];\n      }\n    }\n\n    if (JSON.stringify(arr) !== JSON.stringify(this.gameState)) {\n      this.gameState = arr;\n      this.addNewCell();\n      this.gameScore += score;\n      this.checkinitialState();\n    }\n  }\n  moveDown() {\n    if (this.gameStatus !== 'playing') {\n      return;\n    }\n\n    const arr = [[], [], [], []];\n    let score = 0;\n\n    for (let i = 0; i < this.gameState.length; i++) {\n      let column = [\n        this.gameState[0][i],\n        this.gameState[1][i],\n        this.gameState[2][i],\n        this.gameState[3][i],\n      ];\n\n      column = column.filter((num) => num !== 0);\n\n      for (let j = column.length - 1; j > 0; j--) {\n        if (column[j] === column[j - 1]) {\n          column[j] *= 2;\n          column[j - 1] = 0;\n          score += column[j];\n        }\n      }\n\n      column = column.filter((num) => num !== 0);\n\n      while (column.length < 4) {\n        column.unshift(0);\n      }\n\n      for (let j = 0; j < this.gameState.length; j++) {\n        arr[j][i] = column[j];\n      }\n    }\n\n    if (JSON.stringify(arr) !== JSON.stringify(this.gameState)) {\n      this.gameState = arr;\n      this.addNewCell();\n      this.gameScore += score;\n      this.checkinitialState();\n    }\n  }\n\n  /**\n   * @returns {number}\n   */\n  getScore() {\n    return this.gameScore;\n  }\n\n  /**\n   * @returns {number[][]}\n   */\n  getState() {\n    return this.gameState;\n  }\n\n  /**\n   * Returns the current game status.\n   *\n   * @returns {string} One of: 'idle', 'playing', 'win', 'lose'\n   *\n   * `idle` - the game has not started yet (the initial state);\n   * `playing` - the game is in progress;\n   * `win` - the game is won;\n   * `lose` - the game is lost\n   */\n  getStatus() {\n    return this.gameStatus;\n  }\n\n  /**\n   * Starts the game.\n   */\n  start() {\n    this.addNewCell();\n    this.addNewCell();\n    this.gameStatus = 'playing';\n  }\n\n  /**\n   * Resets the game.\n   */\n  restart() {\n    this.gameState = this.initialState.map((row) => [...row]);\n    this.gameStatus = 'idle';\n    this.gameScore = 0;\n    this.zeroCell = 16;\n  }\n}\nmodule.exports = Game;\n"],"names":["$a5fd07fa01589658$exports","constructor","initialState","gameState","map","row","gameStatus","gameScore","zeroCell","number","random","max","Math","floor","addNewCell","emptyCells","i","length","j","push","cell","checkinitialState","count","canMove","moveLeft","arr","score","filter","num","JSON","stringify","moveRight","unshift","moveUp","column","moveDown","getScore","getState","getStatus","start","restart","$09e991522ca7e64e$var$fieldRow","document","querySelectorAll","$09e991522ca7e64e$var$scoreCeil","querySelector","$09e991522ca7e64e$var$startBtn","$09e991522ca7e64e$var$messageWin","$09e991522ca7e64e$var$messageLose","$09e991522ca7e64e$var$messageStart","$09e991522ca7e64e$var$game","$09e991522ca7e64e$var$addField","classList","remove","removeEventListener","$09e991522ca7e64e$var$handleKeyDown","fieldCell","cellValue","textContent","add","e","key","addEventListener"],"version":3,"file":"index.b665607d.js.map"}