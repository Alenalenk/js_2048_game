{"mappings":"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","sources":["<anon>","src/scripts/main.js","node_modules/@swc/helpers/esm/_to_consumable_array.js","node_modules/@swc/helpers/esm/_array_without_holes.js","node_modules/@swc/helpers/esm/_array_like_to_array.js","node_modules/@swc/helpers/esm/_iterable_to_array.js","node_modules/@swc/helpers/esm/_non_iterable_spread.js","node_modules/@swc/helpers/esm/_unsupported_iterable_to_array.js","src/modules/Game.class.js","node_modules/@swc/helpers/esm/_class_call_check.js","node_modules/@swc/helpers/esm/_create_class.js","node_modules/@swc/helpers/esm/_sliced_to_array.js","node_modules/@swc/helpers/esm/_array_with_holes.js","node_modules/@swc/helpers/esm/_iterable_to_array_limit.js","node_modules/@swc/helpers/esm/_non_iterable_rest.js"],"sourcesContent":["(function () {\nfunction $c3b10a83b523f372$export$79e617b1955a2616(arr, len) {\n    if (len == null || len > arr.length) len = arr.length;\n    for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];\n    return arr2;\n}\n\n\nfunction $c50969dc1df61e8b$export$7e0947b5ad3404e2(arr) {\n    if (Array.isArray(arr)) return (0, $c3b10a83b523f372$export$79e617b1955a2616)(arr);\n}\n\n\nfunction $09c9f293d010c0e1$export$1eb58a6e75231000(iter) {\n    if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter);\n}\n\n\nfunction $38c2d4931cb7a7c4$export$e6f3c4780d19eb2b() {\n    throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\n\n\nfunction $d4f69c5c6c4654b1$export$a5be06335b3a083c(o, minLen) {\n    if (!o) return;\n    if (typeof o === \"string\") return (0, $c3b10a83b523f372$export$79e617b1955a2616)(o, minLen);\n    var n = Object.prototype.toString.call(o).slice(8, -1);\n    if (n === \"Object\" && o.constructor) n = o.constructor.name;\n    if (n === \"Map\" || n === \"Set\") return Array.from(n);\n    if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return (0, $c3b10a83b523f372$export$79e617b1955a2616)(o, minLen);\n}\n\n\nfunction $227c6742e0ff6f82$export$1b5e630bc3aea29f(arr) {\n    return (0, $c50969dc1df61e8b$export$7e0947b5ad3404e2)(arr) || (0, $09c9f293d010c0e1$export$1eb58a6e75231000)(arr) || (0, $d4f69c5c6c4654b1$export$a5be06335b3a083c)(arr) || (0, $38c2d4931cb7a7c4$export$e6f3c4780d19eb2b)();\n}\n\n\n\"use strict\";\nvar $3d28d7f1aac198f5$exports = {};\nfunction $8713978b2328d32b$export$2996f80ef42b8419(instance, Constructor) {\n    if (!(instance instanceof Constructor)) throw new TypeError(\"Cannot call a class as a function\");\n}\n\n\nfunction $4fc75ccb937ab1df$var$_defineProperties(target, props) {\n    for(var i = 0; i < props.length; i++){\n        var descriptor = props[i];\n        descriptor.enumerable = descriptor.enumerable || false;\n        descriptor.configurable = true;\n        if (\"value\" in descriptor) descriptor.writable = true;\n        Object.defineProperty(target, descriptor.key, descriptor);\n    }\n}\nfunction $4fc75ccb937ab1df$export$d60067ff2358eee8(Constructor, protoProps, staticProps) {\n    if (protoProps) $4fc75ccb937ab1df$var$_defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) $4fc75ccb937ab1df$var$_defineProperties(Constructor, staticProps);\n    return Constructor;\n}\n\n\nfunction $09cbfe85151ea6c6$export$e6256bf45c68d561(arr) {\n    if (Array.isArray(arr)) return arr;\n}\n\n\nfunction $8ca2848f896a6803$export$2fd15edff6687200(arr, i) {\n    var _i = arr == null ? null : typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"];\n    if (_i == null) return;\n    var _arr = [];\n    var _n = true;\n    var _d = false;\n    var _s, _e;\n    try {\n        for(_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true){\n            _arr.push(_s.value);\n            if (i && _arr.length === i) break;\n        }\n    } catch (err) {\n        _d = true;\n        _e = err;\n    } finally{\n        try {\n            if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n        } finally{\n            if (_d) throw _e;\n        }\n    }\n    return _arr;\n}\n\n\nfunction $a0bc1859061deae1$export$60dbc22abd7da546() {\n    throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\n\n\nfunction $efec029548ccee7f$export$fdf2a89c76341bbf(arr, i) {\n    return (0, $09cbfe85151ea6c6$export$e6256bf45c68d561)(arr) || (0, $8ca2848f896a6803$export$2fd15edff6687200)(arr, i) || (0, $d4f69c5c6c4654b1$export$a5be06335b3a083c)(arr, i) || (0, $a0bc1859061deae1$export$60dbc22abd7da546)();\n}\n\n\n\n\"use strict\";\n/**\n * This class represents the game.\n * Now it has a basic structure, that is needed for testing.\n * Feel free to add more props and methods if needed.\n */ var $3d28d7f1aac198f5$var$Game = /*#__PURE__*/ function() {\n    function Game(initialState) {\n        (0, $8713978b2328d32b$export$2996f80ef42b8419)(this, Game);\n        // eslint-disable-next-line no-console\n        this.initialState = initialState || [\n            [\n                0,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                0\n            ]\n        ];\n        this.gameState = this.initialState.map(function(row) {\n            return (0, $227c6742e0ff6f82$export$1b5e630bc3aea29f)(row);\n        });\n        this.gameStatus = \"idle\";\n        this.gameScore = 0;\n        this.zeroCell = 16;\n        this.number = [\n            2,\n            2,\n            2,\n            2,\n            2,\n            2,\n            2,\n            2,\n            2,\n            4\n        ];\n    }\n    (0, $4fc75ccb937ab1df$export$d60067ff2358eee8)(Game, [\n        {\n            key: \"random\",\n            value: function random(max) {\n                return Math.floor(Math.random() * (max + 1));\n            }\n        },\n        {\n            key: \"addNewCell\",\n            value: function addNewCell() {\n                var emptyCells = [];\n                for(var i = 0; i < this.gameState.length; i++){\n                    for(var j = 0; j < this.gameState[i].length; j++)if (this.gameState[i][j] === 0) emptyCells.push([\n                        i,\n                        j\n                    ]);\n                }\n                if (emptyCells.length > 0) {\n                    var _emptyCells_this_random = (0, $efec029548ccee7f$export$fdf2a89c76341bbf)(emptyCells[this.random(emptyCells.length - 1)], 2), row = _emptyCells_this_random[0], cell = _emptyCells_this_random[1];\n                    this.gameState[row][cell] = this.number[this.random(9)];\n                    this.zeroCell--;\n                }\n            }\n        },\n        {\n            key: \"checkinitialState\",\n            value: function checkinitialState() {\n                var count = 0;\n                for(var i = 0; i < this.gameState.length; i++)for(var j = 0; j < this.gameState[i].length; j++){\n                    if (this.gameState[i][j] === 0) count++;\n                    else if (this.gameState[i][j] === 2048) this.gameStatus = \"win\";\n                }\n                this.zeroCell = count;\n                if (count === 0 && !this.canMove()) this.gameStatus = \"lose\";\n            }\n        },\n        {\n            key: \"canMove\",\n            value: function canMove() {\n                for(var i = 0; i < this.gameState.length; i++)for(var j = 0; j < this.gameState[i].length; j++){\n                    if (this.gameState[i][j] === 0) return true;\n                    if (j < this.gameState[i].length - 1 && this.gameState[i][j] === this.gameState[i][j + 1]) return true;\n                    if (i < this.gameState.length - 1 && this.gameState[i][j] === this.gameState[i + 1][j]) return true;\n                }\n                return false;\n            }\n        },\n        {\n            key: \"moveLeft\",\n            value: function moveLeft() {\n                var _this = this, _loop = function(i) {\n                    var row = _this.gameState[i].filter(function(num) {\n                        return num !== 0;\n                    });\n                    for(var j = 0; j < row.length - 1; j++)if (row[j] === row[j + 1]) {\n                        row[j] *= 2;\n                        row[j + 1] = 0;\n                        score += row[j];\n                    }\n                    row = row.filter(function(num) {\n                        return num !== 0;\n                    });\n                    while(row.length < 4)row.push(0);\n                    arr.push(row);\n                };\n                if (this.gameStatus !== \"playing\") return;\n                var arr = [];\n                var score = 0;\n                for(var i = 0; i < this.gameState.length; i++)_loop(i);\n                if (JSON.stringify(arr) !== JSON.stringify(this.gameState)) {\n                    this.gameState = arr;\n                    this.addNewCell();\n                    this.gameScore += score;\n                    this.checkinitialState();\n                }\n            }\n        },\n        {\n            key: \"moveRight\",\n            value: function moveRight() {\n                var _this = this, _loop = function(i) {\n                    var row = _this.gameState[i].filter(function(num) {\n                        return num !== 0;\n                    });\n                    for(var j = row.length - 1; j > 0; j--)if (row[j] === row[j - 1]) {\n                        row[j] *= 2;\n                        row[j - 1] = 0;\n                        score += row[j];\n                    }\n                    row = row.filter(function(num) {\n                        return num !== 0;\n                    });\n                    while(row.length < 4)row.unshift(0);\n                    arr.push(row);\n                };\n                if (this.gameStatus !== \"playing\") return;\n                var arr = [];\n                var score = 0;\n                for(var i = 0; i < this.gameState.length; i++)_loop(i);\n                if (JSON.stringify(arr) !== JSON.stringify(this.gameState)) {\n                    this.gameState = arr;\n                    this.addNewCell();\n                    this.gameScore += score;\n                    this.checkinitialState();\n                }\n            }\n        },\n        {\n            key: \"moveUp\",\n            value: function moveUp() {\n                var _this = this, _loop = function(i) {\n                    var column = [\n                        _this.gameState[0][i],\n                        _this.gameState[1][i],\n                        _this.gameState[2][i],\n                        _this.gameState[3][i]\n                    ];\n                    column = column.filter(function(num) {\n                        return num !== 0;\n                    });\n                    for(var j = 0; j < column.length - 1; j++)if (column[j] === column[j + 1]) {\n                        column[j] *= 2;\n                        column[j + 1] = 0;\n                        score += column[j];\n                    }\n                    column = column.filter(function(num) {\n                        return num !== 0;\n                    });\n                    while(column.length < 4)column.push(0);\n                    for(var j1 = 0; j1 < _this.gameState.length; j1++)arr[j1][i] = column[j1];\n                };\n                if (this.gameStatus !== \"playing\") return;\n                var arr = [\n                    [],\n                    [],\n                    [],\n                    []\n                ];\n                var score = 0;\n                for(var i = 0; i < this.gameState.length; i++)_loop(i);\n                if (JSON.stringify(arr) !== JSON.stringify(this.gameState)) {\n                    this.gameState = arr;\n                    this.addNewCell();\n                    this.gameScore += score;\n                    this.checkinitialState();\n                }\n            }\n        },\n        {\n            key: \"moveDown\",\n            value: function moveDown() {\n                var _this = this, _loop = function(i) {\n                    var column = [\n                        _this.gameState[0][i],\n                        _this.gameState[1][i],\n                        _this.gameState[2][i],\n                        _this.gameState[3][i]\n                    ];\n                    column = column.filter(function(num) {\n                        return num !== 0;\n                    });\n                    for(var j = column.length - 1; j > 0; j--)if (column[j] === column[j - 1]) {\n                        column[j] *= 2;\n                        column[j - 1] = 0;\n                        score += column[j];\n                    }\n                    column = column.filter(function(num) {\n                        return num !== 0;\n                    });\n                    while(column.length < 4)column.unshift(0);\n                    for(var j1 = 0; j1 < _this.gameState.length; j1++)arr[j1][i] = column[j1];\n                };\n                if (this.gameStatus !== \"playing\") return;\n                var arr = [\n                    [],\n                    [],\n                    [],\n                    []\n                ];\n                var score = 0;\n                for(var i = 0; i < this.gameState.length; i++)_loop(i);\n                if (JSON.stringify(arr) !== JSON.stringify(this.gameState)) {\n                    this.gameState = arr;\n                    this.addNewCell();\n                    this.gameScore += score;\n                    this.checkinitialState();\n                }\n            }\n        },\n        {\n            /**\n   * @returns {number}\n   */ key: \"getScore\",\n            value: function getScore() {\n                return this.gameScore;\n            }\n        },\n        {\n            /**\n   * @returns {number[][]}\n   */ key: \"getState\",\n            value: function getState() {\n                return this.gameState;\n            }\n        },\n        {\n            /**\n   * Returns the current game status.\n   *\n   * @returns {string} One of: 'idle', 'playing', 'win', 'lose'\n   *\n   * `idle` - the game has not started yet (the initial state);\n   * `playing` - the game is in progress;\n   * `win` - the game is won;\n   * `lose` - the game is lost\n   */ key: \"getStatus\",\n            value: function getStatus() {\n                return this.gameStatus;\n            }\n        },\n        {\n            /**\n   * Starts the game.\n   */ key: \"start\",\n            value: function start() {\n                this.addNewCell();\n                this.addNewCell();\n                this.gameStatus = \"playing\";\n            }\n        },\n        {\n            /**\n   * Resets the game.\n   */ key: \"restart\",\n            value: function restart() {\n                this.gameState = this.initialState.map(function(row) {\n                    return (0, $227c6742e0ff6f82$export$1b5e630bc3aea29f)(row);\n                });\n                this.gameStatus = \"idle\";\n                this.gameScore = 0;\n                this.zeroCell = 16;\n            }\n        }\n    ]);\n    return Game;\n}();\n$3d28d7f1aac198f5$exports = $3d28d7f1aac198f5$var$Game;\n\n\nvar $197cd56b15c33885$var$fieldRow = (0, $227c6742e0ff6f82$export$1b5e630bc3aea29f)(document.querySelectorAll(\".field-row\"));\nvar $197cd56b15c33885$var$scoreCeil = document.querySelector(\".game-score\");\nvar $197cd56b15c33885$var$startBtn = document.querySelector(\".start\");\nvar $197cd56b15c33885$var$messageWin = document.querySelector(\".message-win\");\nvar $197cd56b15c33885$var$messageLose = document.querySelector(\".message-lose\");\nvar $197cd56b15c33885$var$messageStart = document.querySelector(\".message-start\");\nvar $197cd56b15c33885$var$game = new $3d28d7f1aac198f5$exports();\nvar $197cd56b15c33885$var$addField = function() {\n    if ($197cd56b15c33885$var$game.getStatus() === \"win\") {\n        $197cd56b15c33885$var$messageWin.classList.remove(\"hidden\");\n        document.removeEventListener(\"keydown\", $197cd56b15c33885$var$handleKeyDown);\n        $197cd56b15c33885$var$game.gameStatus = \"playing\";\n        return;\n    }\n    if ($197cd56b15c33885$var$game.getStatus() === \"lose\") {\n        $197cd56b15c33885$var$messageLose.classList.remove(\"hidden\");\n        document.removeEventListener(\"keydown\", $197cd56b15c33885$var$handleKeyDown);\n        $197cd56b15c33885$var$game.gameStatus = \"playing\";\n        return;\n    }\n    for(var i = 0; i < $197cd56b15c33885$var$game.gameState.length; i++){\n        var fieldCell = (0, $227c6742e0ff6f82$export$1b5e630bc3aea29f)($197cd56b15c33885$var$fieldRow[i].querySelectorAll(\".field-cell\"));\n        for(var j = 0; j < $197cd56b15c33885$var$game.gameState[i].length; j++){\n            var cell = fieldCell[j];\n            var cellValue = $197cd56b15c33885$var$game.gameState[i][j];\n            if (cellValue === 0 && cell.textContent > 0) {\n                cell.classList.remove(\"field-cell--\".concat(cell.textContent));\n                cell.textContent = \"\";\n            }\n            if (cellValue > 0) {\n                cell.classList.remove(\"field-cell--\".concat(cell.textContent));\n                cell.classList.add(\"field-cell--\".concat(cellValue));\n                cell.textContent = cellValue;\n            }\n        }\n    }\n    $197cd56b15c33885$var$scoreCeil.textContent = $197cd56b15c33885$var$game.gameScore;\n};\nvar $197cd56b15c33885$var$handleKeyDown = function(e) {\n    switch(e.key){\n        case \"ArrowLeft\":\n            $197cd56b15c33885$var$game.moveLeft();\n            break;\n        case \"ArrowRight\":\n            $197cd56b15c33885$var$game.moveRight();\n            break;\n        case \"ArrowUp\":\n            $197cd56b15c33885$var$game.moveUp();\n            break;\n        case \"ArrowDown\":\n            $197cd56b15c33885$var$game.moveDown();\n            break;\n        default:\n            return;\n    }\n    $197cd56b15c33885$var$addField();\n};\nvar $197cd56b15c33885$var$handleStart = function() {\n    document.addEventListener(\"keydown\", $197cd56b15c33885$var$handleKeyDown);\n    if ($197cd56b15c33885$var$game.getStatus() === \"playing\") {\n        $197cd56b15c33885$var$game.restart();\n        $197cd56b15c33885$var$messageLose.classList.add(\"hidden\");\n        $197cd56b15c33885$var$messageWin.classList.add(\"hidden\");\n    }\n    if ($197cd56b15c33885$var$game.getStatus() === \"idle\") {\n        $197cd56b15c33885$var$game.start();\n        $197cd56b15c33885$var$startBtn.classList.remove(\"start\");\n        $197cd56b15c33885$var$startBtn.classList.add(\"restart\");\n        $197cd56b15c33885$var$startBtn.textContent = \"Restart\";\n        $197cd56b15c33885$var$messageStart.classList.add(\"hidden\");\n    }\n    $197cd56b15c33885$var$addField();\n};\n$197cd56b15c33885$var$startBtn.addEventListener(\"click\", $197cd56b15c33885$var$handleStart);\n\n})();\n//# sourceMappingURL=index.b2d67098.js.map\n","'use strict';\n\nconst Game = require('../modules/Game.class');\nconst fieldRow = [...document.querySelectorAll('.field-row')];\nconst scoreCeil = document.querySelector('.game-score');\nconst startBtn = document.querySelector('.start');\nconst messageWin = document.querySelector('.message-win');\nconst messageLose = document.querySelector('.message-lose');\nconst messageStart = document.querySelector('.message-start');\n\nconst game = new Game();\n\nconst addField = () => {\n  if (game.getStatus() === 'win') {\n    messageWin.classList.remove('hidden');\n    document.removeEventListener('keydown', handleKeyDown);\n    game.gameStatus = 'playing';\n\n    return;\n  }\n\n  if (game.getStatus() === 'lose') {\n    messageLose.classList.remove('hidden');\n    document.removeEventListener('keydown', handleKeyDown);\n    game.gameStatus = 'playing';\n\n    return;\n  }\n\n  for (let i = 0; i < game.gameState.length; i++) {\n    const fieldCell = [...fieldRow[i].querySelectorAll('.field-cell')];\n\n    for (let j = 0; j < game.gameState[i].length; j++) {\n      const cell = fieldCell[j];\n      const cellValue = game.gameState[i][j];\n\n      if (cellValue === 0 && cell.textContent > 0) {\n        cell.classList.remove(`field-cell--${cell.textContent}`);\n        cell.textContent = '';\n      }\n\n      if (cellValue > 0) {\n        cell.classList.remove(`field-cell--${cell.textContent}`);\n        cell.classList.add(`field-cell--${cellValue}`);\n        cell.textContent = cellValue;\n      }\n    }\n  }\n  scoreCeil.textContent = game.gameScore;\n};\n\nconst handleKeyDown = (e) => {\n  switch (e.key) {\n    case 'ArrowLeft':\n      game.moveLeft();\n      break;\n\n    case 'ArrowRight':\n      game.moveRight();\n      break;\n\n    case 'ArrowUp':\n      game.moveUp();\n      break;\n\n    case 'ArrowDown':\n      game.moveDown();\n      break;\n\n    default:\n      return;\n  }\n\n  addField();\n};\n\nconst handleStart = () => {\n  document.addEventListener('keydown', handleKeyDown);\n\n  if (game.getStatus() === 'playing') {\n    game.restart();\n    messageLose.classList.add('hidden');\n    messageWin.classList.add('hidden');\n  }\n\n  if (game.getStatus() === 'idle') {\n    game.start();\n    startBtn.classList.remove('start');\n    startBtn.classList.add('restart');\n    startBtn.textContent = 'Restart';\n    messageStart.classList.add('hidden');\n  }\n\n  addField();\n};\n\nstartBtn.addEventListener('click', handleStart);\n","import { _array_without_holes } from \"./_array_without_holes.js\";\nimport { _iterable_to_array } from \"./_iterable_to_array.js\";\nimport { _non_iterable_spread } from \"./_non_iterable_spread.js\";\nimport { _unsupported_iterable_to_array } from \"./_unsupported_iterable_to_array.js\";\n\nexport function _to_consumable_array(arr) {\n    return _array_without_holes(arr) || _iterable_to_array(arr) || _unsupported_iterable_to_array(arr) || _non_iterable_spread();\n}\nexport { _to_consumable_array as _ };\n","import { _array_like_to_array } from \"./_array_like_to_array.js\";\n\nexport function _array_without_holes(arr) {\n    if (Array.isArray(arr)) return _array_like_to_array(arr);\n}\nexport { _array_without_holes as _ };\n","export function _array_like_to_array(arr, len) {\n    if (len == null || len > arr.length) len = arr.length;\n\n    for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];\n\n    return arr2;\n}\nexport { _array_like_to_array as _ };\n","export function _iterable_to_array(iter) {\n    if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) {\n        return Array.from(iter);\n    }\n}\nexport { _iterable_to_array as _ };\n","export function _non_iterable_spread() {\n    throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nexport { _non_iterable_spread as _ };\n","import { _array_like_to_array } from \"./_array_like_to_array.js\";\n\nexport function _unsupported_iterable_to_array(o, minLen) {\n    if (!o) return;\n    if (typeof o === \"string\") return _array_like_to_array(o, minLen);\n\n    var n = Object.prototype.toString.call(o).slice(8, -1);\n\n    if (n === \"Object\" && o.constructor) n = o.constructor.name;\n    if (n === \"Map\" || n === \"Set\") return Array.from(n);\n    if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _array_like_to_array(o, minLen);\n}\nexport { _unsupported_iterable_to_array as _ };\n","'use strict';\n\n/**\n * This class represents the game.\n * Now it has a basic structure, that is needed for testing.\n * Feel free to add more props and methods if needed.\n */\nclass Game {\n  /**\n   * Creates a new game instance.\n   *\n   * @param {number[][]} initialState\n   * The initial state of the board.\n   * @default\n   * [[0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0]]\n   *\n   * If passed, the board will be initialized with the provided\n   * initial state.\n   */\n  constructor(initialState) {\n    // eslint-disable-next-line no-console\n    this.initialState = initialState || [\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n    ];\n    this.gameState = this.initialState.map((row) => [...row]);\n    this.gameStatus = 'idle';\n    this.gameScore = 0;\n    this.zeroCell = 16;\n    this.number = [2, 2, 2, 2, 2, 2, 2, 2, 2, 4];\n  }\n\n  random(max) {\n    return Math.floor(Math.random() * (max + 1));\n  }\n\n  addNewCell() {\n    const emptyCells = [];\n\n    for (let i = 0; i < this.gameState.length; i++) {\n      for (let j = 0; j < this.gameState[i].length; j++) {\n        if (this.gameState[i][j] === 0) {\n          emptyCells.push([i, j]);\n        }\n      }\n    }\n\n    if (emptyCells.length > 0) {\n      const [row, cell] = emptyCells[this.random(emptyCells.length - 1)];\n\n      this.gameState[row][cell] = this.number[this.random(9)];\n      this.zeroCell--;\n    }\n  }\n\n  checkinitialState() {\n    let count = 0;\n\n    for (let i = 0; i < this.gameState.length; i++) {\n      for (let j = 0; j < this.gameState[i].length; j++) {\n        if (this.gameState[i][j] === 0) {\n          count++;\n        } else {\n          if (this.gameState[i][j] === 2048) {\n            this.gameStatus = 'win';\n          }\n        }\n      }\n    }\n    this.zeroCell = count;\n\n    if (count === 0 && !this.canMove()) {\n      this.gameStatus = 'lose';\n    }\n  }\n\n  canMove() {\n    for (let i = 0; i < this.gameState.length; i++) {\n      for (let j = 0; j < this.gameState[i].length; j++) {\n        if (this.gameState[i][j] === 0) {\n          return true;\n        }\n\n        if (\n          j < this.gameState[i].length - 1 &&\n          this.gameState[i][j] === this.gameState[i][j + 1]\n        ) {\n          return true;\n        }\n\n        if (\n          i < this.gameState.length - 1 &&\n          this.gameState[i][j] === this.gameState[i + 1][j]\n        ) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  }\n\n  moveLeft() {\n    if (this.gameStatus !== 'playing') {\n      return;\n    }\n\n    const arr = [];\n    let score = 0;\n\n    for (let i = 0; i < this.gameState.length; i++) {\n      let row = this.gameState[i].filter((num) => num !== 0);\n\n      for (let j = 0; j < row.length - 1; j++) {\n        if (row[j] === row[j + 1]) {\n          row[j] *= 2;\n          row[j + 1] = 0;\n          score += row[j];\n        }\n      }\n\n      row = row.filter((num) => num !== 0);\n\n      while (row.length < 4) {\n        row.push(0);\n      }\n      arr.push(row);\n    }\n\n    if (JSON.stringify(arr) !== JSON.stringify(this.gameState)) {\n      this.gameState = arr;\n      this.addNewCell();\n      this.gameScore += score;\n      this.checkinitialState();\n    }\n  }\n\n  moveRight() {\n    if (this.gameStatus !== 'playing') {\n      return;\n    }\n\n    const arr = [];\n    let score = 0;\n\n    for (let i = 0; i < this.gameState.length; i++) {\n      let row = this.gameState[i].filter((num) => num !== 0);\n\n      for (let j = row.length - 1; j > 0; j--) {\n        if (row[j] === row[j - 1]) {\n          row[j] *= 2;\n          row[j - 1] = 0;\n          score += row[j];\n        }\n      }\n\n      row = row.filter((num) => num !== 0);\n\n      while (row.length < 4) {\n        row.unshift(0);\n      }\n      arr.push(row);\n    }\n\n    if (JSON.stringify(arr) !== JSON.stringify(this.gameState)) {\n      this.gameState = arr;\n      this.addNewCell();\n      this.gameScore += score;\n      this.checkinitialState();\n    }\n  }\n\n  moveUp() {\n    if (this.gameStatus !== 'playing') {\n      return;\n    }\n\n    const arr = [[], [], [], []];\n    let score = 0;\n\n    for (let i = 0; i < this.gameState.length; i++) {\n      let column = [\n        this.gameState[0][i],\n        this.gameState[1][i],\n        this.gameState[2][i],\n        this.gameState[3][i],\n      ];\n\n      column = column.filter((num) => num !== 0);\n\n      for (let j = 0; j < column.length - 1; j++) {\n        if (column[j] === column[j + 1]) {\n          column[j] *= 2;\n          column[j + 1] = 0;\n          score += column[j];\n        }\n      }\n\n      column = column.filter((num) => num !== 0);\n\n      while (column.length < 4) {\n        column.push(0);\n      }\n\n      for (let j = 0; j < this.gameState.length; j++) {\n        arr[j][i] = column[j];\n      }\n    }\n\n    if (JSON.stringify(arr) !== JSON.stringify(this.gameState)) {\n      this.gameState = arr;\n      this.addNewCell();\n      this.gameScore += score;\n      this.checkinitialState();\n    }\n  }\n  moveDown() {\n    if (this.gameStatus !== 'playing') {\n      return;\n    }\n\n    const arr = [[], [], [], []];\n    let score = 0;\n\n    for (let i = 0; i < this.gameState.length; i++) {\n      let column = [\n        this.gameState[0][i],\n        this.gameState[1][i],\n        this.gameState[2][i],\n        this.gameState[3][i],\n      ];\n\n      column = column.filter((num) => num !== 0);\n\n      for (let j = column.length - 1; j > 0; j--) {\n        if (column[j] === column[j - 1]) {\n          column[j] *= 2;\n          column[j - 1] = 0;\n          score += column[j];\n        }\n      }\n\n      column = column.filter((num) => num !== 0);\n\n      while (column.length < 4) {\n        column.unshift(0);\n      }\n\n      for (let j = 0; j < this.gameState.length; j++) {\n        arr[j][i] = column[j];\n      }\n    }\n\n    if (JSON.stringify(arr) !== JSON.stringify(this.gameState)) {\n      this.gameState = arr;\n      this.addNewCell();\n      this.gameScore += score;\n      this.checkinitialState();\n    }\n  }\n\n  /**\n   * @returns {number}\n   */\n  getScore() {\n    return this.gameScore;\n  }\n\n  /**\n   * @returns {number[][]}\n   */\n  getState() {\n    return this.gameState;\n  }\n\n  /**\n   * Returns the current game status.\n   *\n   * @returns {string} One of: 'idle', 'playing', 'win', 'lose'\n   *\n   * `idle` - the game has not started yet (the initial state);\n   * `playing` - the game is in progress;\n   * `win` - the game is won;\n   * `lose` - the game is lost\n   */\n  getStatus() {\n    return this.gameStatus;\n  }\n\n  /**\n   * Starts the game.\n   */\n  start() {\n    this.addNewCell();\n    this.addNewCell();\n    this.gameStatus = 'playing';\n  }\n\n  /**\n   * Resets the game.\n   */\n  restart() {\n    this.gameState = this.initialState.map((row) => [...row]);\n    this.gameStatus = 'idle';\n    this.gameScore = 0;\n    this.zeroCell = 16;\n  }\n}\nmodule.exports = Game;\n","export function _class_call_check(instance, Constructor) {\n    if (!(instance instanceof Constructor)) throw new TypeError(\"Cannot call a class as a function\");\n}\nexport { _class_call_check as _ };\n","function _defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n        var descriptor = props[i];\n        descriptor.enumerable = descriptor.enumerable || false;\n        descriptor.configurable = true;\n\n        if (\"value\" in descriptor) descriptor.writable = true;\n\n        Object.defineProperty(target, descriptor.key, descriptor);\n    }\n}\nexport function _create_class(Constructor, protoProps, staticProps) {\n    if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) _defineProperties(Constructor, staticProps);\n\n    return Constructor;\n}\nexport { _create_class as _ };\n","import { _array_with_holes } from \"./_array_with_holes.js\";\nimport { _iterable_to_array_limit } from \"./_iterable_to_array_limit.js\";\nimport { _non_iterable_rest } from \"./_non_iterable_rest.js\";\nimport { _unsupported_iterable_to_array } from \"./_unsupported_iterable_to_array.js\";\n\nexport function _sliced_to_array(arr, i) {\n    return _array_with_holes(arr) || _iterable_to_array_limit(arr, i) || _unsupported_iterable_to_array(arr, i) || _non_iterable_rest();\n}\nexport { _sliced_to_array as _ };\n","export function _array_with_holes(arr) {\n    if (Array.isArray(arr)) return arr;\n}\nexport { _array_with_holes as _ };\n","export function _iterable_to_array_limit(arr, i) {\n    var _i = arr == null ? null : typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"];\n\n    if (_i == null) return;\n\n    var _arr = [];\n    var _n = true;\n    var _d = false;\n    var _s, _e;\n\n    try {\n        for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {\n            _arr.push(_s.value);\n            if (i && _arr.length === i) break;\n        }\n    } catch (err) {\n        _d = true;\n        _e = err;\n    } finally {\n        try {\n            if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n        } finally {\n            if (_d) throw _e;\n        }\n    }\n\n    return _arr;\n}\nexport { _iterable_to_array_limit as _ };\n","export function _non_iterable_rest() {\n    throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nexport { _non_iterable_rest as _ };\n"],"names":["$c3b10a83b523f372$export$79e617b1955a2616","arr","len","length","i","arr2","Array","$d4f69c5c6c4654b1$export$a5be06335b3a083c","o","minLen","n","Object","prototype","toString","call","slice","constructor","name","from","test","$227c6742e0ff6f82$export$1b5e630bc3aea29f","isArray","iter","Symbol","iterator","TypeError","$3d28d7f1aac198f5$exports","protoProps","Game","initialState","instance","Constructor","gameState","map","row","gameStatus","gameScore","zeroCell","number","key","value","max","Math","floor","random","emptyCells","j","push","_emptyCells_this_random","_s","_e","_i","_arr","_n","_d","next","done","err","cell","count","canMove","_this","score","_loop","filter","num","JSON","stringify","addNewCell","checkinitialState","unshift","column","j1","$4fc75ccb937ab1df$var$_defineProperties","target","props","descriptor","enumerable","configurable","writable","defineProperty","$197cd56b15c33885$var$fieldRow","document","querySelectorAll","$197cd56b15c33885$var$scoreCeil","querySelector","$197cd56b15c33885$var$startBtn","$197cd56b15c33885$var$messageWin","$197cd56b15c33885$var$messageLose","$197cd56b15c33885$var$messageStart","$197cd56b15c33885$var$game","$197cd56b15c33885$var$addField","getStatus","classList","remove","removeEventListener","$197cd56b15c33885$var$handleKeyDown","fieldCell","cellValue","textContent","concat","add","e","moveLeft","moveRight","moveUp","moveDown","addEventListener","restart","start"],"version":3,"file":"index.b2d67098.js.map"}